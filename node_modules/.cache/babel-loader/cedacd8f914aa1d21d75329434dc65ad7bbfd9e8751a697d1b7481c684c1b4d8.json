{"ast":null,"code":"var _jsxFileName = \"C:\\\\learnings\\\\react_projects\\\\iot-frontend\\\\src\\\\components\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TelemetryDashboard = ({\n  deviceId\n}) => {\n  _s();\n  const [telemetry, setTelemetry] = useState([]);\n  let stompClient = null;\n  useEffect(() => {\n    // Fetch historical telemetry\n    const fetchTelemetry = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`http://localhost:8080/api/telemetry/device/${deviceId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setTelemetry(response.data.map(item => ({\n          timestamp: new Date(item.timestamp).toLocaleTimeString(),\n          temperature: JSON.parse(item.payload).temperature,\n          humidity: JSON.parse(item.payload).humidity\n        })));\n      } catch (error) {\n        console.error('Error fetching telemetry:', error);\n      }\n    };\n    fetchTelemetry();\n\n    // Connect to WebSocket\n    const socket = new SockJS('http://localhost:8080/ws');\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, () => {\n      stompClient.subscribe(`/topic/telemetry/${deviceId}`, message => {\n        const newTelemetry = JSON.parse(message.body);\n        setTelemetry(prev => [...prev, {\n          timestamp: new Date(newTelemetry.timestamp).toLocaleTimeString(),\n          temperature: JSON.parse(newTelemetry.payload).temperature,\n          humidity: JSON.parse(newTelemetry.payload).humidity\n        }].slice(-50)); // Keep last 50 points\n      });\n    }, error => {\n      console.error('WebSocket error:', error);\n    });\n    return () => {\n      if (stompClient) stompClient.disconnect();\n    };\n  }, [deviceId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl mb-4\",\n      children: [\"Telemetry for Device: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 800,\n      height: 400,\n      data: telemetry,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"timestamp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"temperature\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"humidity\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n_s(TelemetryDashboard, \"NRT7Msn3KKAmQBlUjoV2kjj9vDQ=\");\n_c = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c;\n$RefreshReg$(_c, \"TelemetryDashboard\");","map":{"version":3,"names":["axios","useEffect","useState","CartesianGrid","Legend","Line","LineChart","Tooltip","XAxis","YAxis","SockJS","Stomp","jsxDEV","_jsxDEV","TelemetryDashboard","deviceId","_s","telemetry","setTelemetry","stompClient","fetchTelemetry","token","localStorage","getItem","response","get","headers","Authorization","data","map","item","timestamp","Date","toLocaleTimeString","temperature","JSON","parse","payload","humidity","error","console","socket","over","connect","subscribe","message","newTelemetry","body","prev","slice","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["C:/learnings/react_projects/iot-frontend/src/components/TelemetryDashboard.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\n   const TelemetryDashboard = ({ deviceId }) => {\r\n       const [telemetry, setTelemetry] = useState([]);\r\n       let stompClient = null;\r\n\r\n       useEffect(() => {\r\n           // Fetch historical telemetry\r\n           const fetchTelemetry = async () => {\r\n               try {\r\n                   const token = localStorage.getItem('token');\r\n                   const response = await axios.get(`http://localhost:8080/api/telemetry/device/${deviceId}`, {\r\n                       headers: { Authorization: `Bearer ${token}` }\r\n                   });\r\n                   setTelemetry(response.data.map(item => ({\r\n                       timestamp: new Date(item.timestamp).toLocaleTimeString(),\r\n                       temperature: JSON.parse(item.payload).temperature,\r\n                       humidity: JSON.parse(item.payload).humidity\r\n                   })));\r\n               } catch (error) {\r\n                   console.error('Error fetching telemetry:', error);\r\n               }\r\n           };\r\n\r\n           fetchTelemetry();\r\n\r\n           // Connect to WebSocket\r\n           const socket = new SockJS('http://localhost:8080/ws');\r\n           stompClient = Stomp.over(socket);\r\n           stompClient.connect({}, () => {\r\n               stompClient.subscribe(`/topic/telemetry/${deviceId}`, (message) => {\r\n                   const newTelemetry = JSON.parse(message.body);\r\n                   setTelemetry(prev => [...prev, {\r\n                       timestamp: new Date(newTelemetry.timestamp).toLocaleTimeString(),\r\n                       temperature: JSON.parse(newTelemetry.payload).temperature,\r\n                       humidity: JSON.parse(newTelemetry.payload).humidity\r\n                   }].slice(-50)); // Keep last 50 points\r\n               });\r\n           }, (error) => {\r\n               console.error('WebSocket error:', error);\r\n           });\r\n\r\n           return () => {\r\n               if (stompClient) stompClient.disconnect();\r\n           };\r\n       }, [deviceId]);\r\n\r\n       return (\r\n           <div className=\"p-4\">\r\n               <h2 className=\"text-2xl mb-4\">Telemetry for Device: {deviceId}</h2>\r\n               <LineChart width={800} height={400} data={telemetry} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                   <CartesianGrid strokeDasharray=\"3 3\" />\r\n                   <XAxis dataKey=\"timestamp\" />\r\n                   <YAxis />\r\n                   <Tooltip />\r\n                   <Legend />\r\n                   <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\r\n                   <Line type=\"monotone\" dataKey=\"humidity\" stroke=\"#82ca9d\" />\r\n               </LineChart>\r\n           </div>\r\n       );\r\n   };\r\n\r\n   export default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}