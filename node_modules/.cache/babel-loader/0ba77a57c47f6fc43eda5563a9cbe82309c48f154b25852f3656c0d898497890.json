{"ast":null,"code":"var _jsxFileName = \"C:\\\\learnings\\\\react_projects\\\\iot-frontend\\\\src\\\\components\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TelemetryDashboard = ({\n  deviceId\n}) => {\n  _s();\n  const [telemetry, setTelemetry] = useState([]);\n  const [error, setError] = useState('');\n  let stompClient = null;\n  const getAuthHeader = () => {\n    const token = localStorage.getItem('token');\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n  const fetchTelemetry = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/telemetry/device/${deviceId}`, {\n        headers: getAuthHeader()\n      });\n      setTelemetry(response.data.map(item => ({\n        timestamp: new Date(item.timestamp).toLocaleTimeString(),\n        temperature: JSON.parse(item.payload).temperature,\n        humidity: JSON.parse(item.payload).humidity\n      })));\n      setError('');\n    } catch (err) {\n      setError('Failed to fetch telemetry.');\n      console.error('Error fetching telemetry:', err);\n    }\n  };\n  useEffect(() => {\n    fetchTelemetry();\n    const socket = new SockJS('http://localhost:8080/ws');\n    stompClient = new Client({\n      webSocketFactory: () => socket,\n      onConnect: () => {\n        stompClient.subscribe(`/topic/telemetry/${deviceId}`, message => {\n          const newTelemetry = JSON.parse(message.body);\n          setTelemetry(prev => [...prev, {\n            timestamp: new Date(newTelemetry.timestamp).toLocaleTimeString(),\n            temperature: JSON.parse(newTelemetry.payload).temperature,\n            humidity: JSON.parse(newTelemetry.payload).humidity\n          }].slice(-50)); // Keep last 50 points\n        });\n      },\n      onStompError: err => {\n        setError('WebSocket connection failed.');\n        console.error('WebSocket error:', err);\n      }\n    });\n    stompClient.activate();\n    return () => {\n      if (stompClient) stompClient.deactivate();\n    };\n  }, [deviceId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: [\"Telemetry for Device: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 800,\n      height: 400,\n      data: telemetry,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"timestamp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"temperature\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"humidity\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold mb-2\",\n        children: \"Recent Telemetry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-2\",\n        children: telemetry.slice(-10).map((t, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"p-2 border-b\",\n          children: [\"Timestamp: \", t.timestamp, \" - Temperature: \", t.temperature, \"\\xB0C - Humidity: \", t.humidity, \"%\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 28\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n_s(TelemetryDashboard, \"TgUD2mdDzDR90Mq4YhIcrNTIRdw=\");\n_c = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c;\n$RefreshReg$(_c, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Client","SockJS","jsxDEV","_jsxDEV","TelemetryDashboard","deviceId","_s","telemetry","setTelemetry","error","setError","stompClient","getAuthHeader","token","localStorage","getItem","Authorization","fetchTelemetry","response","get","headers","data","map","item","timestamp","Date","toLocaleTimeString","temperature","JSON","parse","payload","humidity","err","console","socket","webSocketFactory","onConnect","subscribe","message","newTelemetry","body","prev","slice","onStompError","activate","deactivate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","t","index","_c","$RefreshReg$"],"sources":["C:/learnings/react_projects/iot-frontend/src/components/TelemetryDashboard.js"],"sourcesContent":["   import React, { useState, useEffect } from 'react';\r\n   import axios from 'axios';\r\n   import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n   import { Client } from '@stomp/stompjs';\r\n   import SockJS from 'sockjs-client';\r\n\r\n   const TelemetryDashboard = ({ deviceId }) => {\r\n       const [telemetry, setTelemetry] = useState([]);\r\n       const [error, setError] = useState('');\r\n       let stompClient = null;\r\n\r\n       const getAuthHeader = () => {\r\n           const token = localStorage.getItem('token');\r\n           return token ? { Authorization: `Bearer ${token}` } : {};\r\n       };\r\n\r\n       const fetchTelemetry = async () => {\r\n           try {\r\n               const response = await axios.get(`http://localhost:8080/api/telemetry/device/${deviceId}`, {\r\n                   headers: getAuthHeader(),\r\n               });\r\n               setTelemetry(response.data.map(item => ({\r\n                   timestamp: new Date(item.timestamp).toLocaleTimeString(),\r\n                   temperature: JSON.parse(item.payload).temperature,\r\n                   humidity: JSON.parse(item.payload).humidity\r\n               })));\r\n               setError('');\r\n           } catch (err) {\r\n               setError('Failed to fetch telemetry.');\r\n               console.error('Error fetching telemetry:', err);\r\n           }\r\n       };\r\n\r\n       useEffect(() => {\r\n           fetchTelemetry();\r\n\r\n           const socket = new SockJS('http://localhost:8080/ws');\r\n           stompClient = new Client({\r\n               webSocketFactory: () => socket,\r\n               onConnect: () => {\r\n                   stompClient.subscribe(`/topic/telemetry/${deviceId}`, (message) => {\r\n                       const newTelemetry = JSON.parse(message.body);\r\n                       setTelemetry(prev => [...prev, {\r\n                           timestamp: new Date(newTelemetry.timestamp).toLocaleTimeString(),\r\n                           temperature: JSON.parse(newTelemetry.payload).temperature,\r\n                           humidity: JSON.parse(newTelemetry.payload).humidity\r\n                       }].slice(-50)); // Keep last 50 points\r\n                   });\r\n               },\r\n               onStompError: (err) => {\r\n                   setError('WebSocket connection failed.');\r\n                   console.error('WebSocket error:', err);\r\n               }\r\n           });\r\n           stompClient.activate();\r\n\r\n           return () => {\r\n               if (stompClient) stompClient.deactivate();\r\n           };\r\n       }, [deviceId]);\r\n\r\n       return (\r\n           <div className=\"container mx-auto p-4\">\r\n               <h2 className=\"text-2xl font-bold mb-4\">Telemetry for Device: {deviceId}</h2>\r\n               {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n               <LineChart\r\n                   width={800}\r\n                   height={400}\r\n                   data={telemetry}\r\n                   margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n               >\r\n                   <CartesianGrid strokeDasharray=\"3 3\" />\r\n                   <XAxis dataKey=\"timestamp\" />\r\n                   <YAxis />\r\n                   <Tooltip />\r\n                   <Legend />\r\n                   <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\r\n                   <Line type=\"monotone\" dataKey=\"humidity\" stroke=\"#82ca9d\" />\r\n               </LineChart>\r\n               <div className=\"mt-4\">\r\n                   <h3 className=\"text-xl font-semibold mb-2\">Recent Telemetry</h3>\r\n                   <ul className=\"space-y-2\">\r\n                       {telemetry.slice(-10).map((t, index) => (\r\n                           <li key={index} className=\"p-2 border-b\">\r\n                               Timestamp: {t.timestamp} - Temperature: {t.temperature}°C - Humidity: {t.humidity}%\r\n                           </li>\r\n                       ))}\r\n                   </ul>\r\n               </div>\r\n           </div>\r\n       );\r\n   };\r\n\r\n   export default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}